#include <iostream>
#include <vector>

using namespace std;

// array is sorted
// we start with left and right at two ends of the array
// then we find mid, and see if mid is the target. if it is we return mid
// if target is greater then mid, we move left.  left = mid + 1
// if target is less then mid, we move right. right = mid - 1
// return mid on match or -1 at the end once we exit while loop. recurssion left <= right.

int binarySearch(const vector<int> &arr, int target)
{
    if (arr.empty())
    {
        throw std::invalid_argument("Array is empty");
    }
    int left = 0;
    int right = arr.size() - 1;
    while (left <= right)
    {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target)
        {
            return mid;
        }
        else if (arr[mid] > target)
        {
            right = mid - 1;
        }
        else
        {
            left = mid + 1;
        }
    }
    return -1;
}

int main()
{
    std::vector<int> arr = {2, 3, 5, 6, 7, 8};
    std::vector<int> emptyarr = {};
    int target = 6;
    try
    {
        int result = binarySearch(arr, target);
        if (result == -1)
        {
            cout << "Number not found in the given array. " << endl;
        }
        else
        {
            cout << "Number is found in the array at index : " << result << endl;
        }
    }
    catch (const std::invalid_argument &e)
    {
        std::cerr << e.what() << std::endl;
    }
    return 0;
}